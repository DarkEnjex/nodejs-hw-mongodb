openapi: 3.1.0
info:
  version: 1.0.0
  title: 'Contact Book'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: 'A contact book program with the ability to create personal contacts. Includes registration to set up contacts for users.'
tags:
  - name: Contacts
    description: Endpoints for managing contacts.
servers:
  - url: https://hw7-swagger-qxz8.onrender.com
  - url: http://localhost:3000
paths:
  /contacts:
    get:
      summary: Retrieve all contacts
      tags:
        - Contacts
      operationId: getAllContacts
      description: >
        Retrieve a list of all contacts for the authenticated user. Supports optional
        filtering, pagination, and sorting.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination (default 1).
          schema:
            type: integer
            default: 1
            example: 1
        - name: perPage
          in: query
          required: false
          description: Number of contacts per page (default 10).
          schema:
            type: integer
            default: 10
            example: 10
        - name: sortBy
          in: query
          required: false
          description: Field to sort contacts by (default 'name').
          schema:
            type: string
            default: name
            example: name
        - name: sortOrder
          in: query
          required: false
          description: >
            Order of sorting: ascending ('asc') or descending ('desc') (default 'asc').
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
            example: asc

      responses:
        '200':
          description: Successfully retrieved the list of contacts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found contacts!
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Contact'
                      page:
                        type: integer
                        description: Current page number.
                        example: 1
                      perPage:
                        type: integer
                        description: Number of contacts per page.
                        example: 10
                      totalItems:
                        type: integer
                        description: Total number of contacts.
                        example: 100
                      totalPages:
                        type: integer
                        description: Total number of pages.
                        example: 10
                      hasPreviousPage:
                        type: boolean
                        description: Indicates if there is a previous page.
                        example: false
                      hasNextPage:
                        type: boolean
                        description: Indicates if there is a next page.
                        example: true
        '401':
          $ref: '#/components/responses/unAuthorizedError'
        '500':
          description: Internal server error.
    post:
      summary: Add a new contact
      tags:
        - Contacts
      operationId: addContact
      description: Create a new contact for the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        description: Contact data to create a new contact. The photo should be sent as a file.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - phoneNumber
                - contactType
              properties:
                name:
                  type: string
                  description: Name of the contact.
                  example: John Doe
                phoneNumber:
                  type: string
                  description: Phone number of the contact.
                  example: '+123456789'
                email:
                  type: string
                  description: Email address of the contact.
                  example: john.doe@example.com
                contactType:
                  type: string
                  enum: [work, home, personal]
                  description: Type of the contact.
                  example: work
                photo:
                  type: string
                  format: binary
                  description: Photo of the contact.
                isFavourite:
                  type: boolean
                  example: true
      responses:
        '201':
          description: Contact created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Contact created successfully!
                  data:
                    $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid request payload.
        '401':
          $ref: '#/components/responses/unAuthorizedError'
        '500':
          description: Internal server error.
  /contacts/{contactId}:
    get:
      summary: Get a contact by ID
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: ID of the contact to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Contact details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/unAuthorizedError'
        '404':
          description: Contact not found
        '500':
          description: Internal server error.
      security:
        - BearerAuth: []
    patch:
      summary: Update a contact by ID
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: ID of the contact to update.
          schema:
            type: string
      requestBody:
        description: Fields to update in the contact, including the option to upload a new photo.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated name of the contact.
                  example: Josh Crowly
                phoneNumber:
                  type: string
                  description: Updated phone number of the contact.
                  example: '+381234567890'
                email:
                  type: string
                  description: Updated email of the contact.
                  example: example@mail.com
                isFavourite:
                  type: boolean
                  description: Updated favourite status of the contact.
                  example: true
                contactType:
                  type: string
                  enum:
                    - work
                    - home
                    - personal
                  description: Updated type of the contact.
                  example: work
                photo:
                  type: string
                  format: binary
                  description: Updated photo of the contact.
      responses:
        '200':
          description: Contact updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Bad request (invalid data).
        '404':
          $ref: ../src/swagger/components/responses/notFoundError.yaml
        '401':
          $ref: '#/components/responses/unAuthorizedError'
        '500':
          description: Internal server error.
      security:
        - BearerAuth: []

    delete:
      summary: Delete a contact by ID
      tags:
        - Contacts
      parameters:
        - name: contactId
          in: path
          required: true
          description: ID of the contact to delete.
          schema:
            type: string
      responses:
        '204':
          description: Contact deleted successfully.
        '401':
          $ref: '#/components/responses/unAuthorizedError'
        '404':
          description: Contact not found
        '500':
          description: Internal server error.
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    unAuthorizedError:
      description: Unauthorized. The user is not authenticated.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
  schemas:
    Contact:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier of the contact.
          example: 64c8a37d7fc733a399ec9a12
        userId:
          type: string
          description: Unique identifier of the user who owns the contact.
          example: 64c8a37d7fc733a399ec9b34
        name:
          type: string
          description: Name of the contact.
          example: John Doe
        email:
          type: string
          description: Email address of the contact.
          example: john.doe@example.com
        phoneNumber:
          type: string
          description: Phone number of the contact.
          example: '+123456789'
        isFavourite:
          type: boolean
          description: Marks if the contact is a favourite.
          example: true
        contactType:
          type: string
          description: Type of the contact.
          example: work
        photo:
          type: string
          format: binary
          description: Photo of the contact.
      required:
        - userId
        - name
        - _id
        - phoneNumber
        - contactType
